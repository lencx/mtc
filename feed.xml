<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>浮之静</title>
  <atom:link href="https://z.nofwl.com/feed.xml" rel="self" type="application/rss+xml" />
  <link>https://z.nofwl.com</link>
  <description>浮之静 技术社区</description>
  <item>
  <title><![CDATA[WebGL系列]]></title>
  <link>https://github.com/lencx/fzj/discussions/6</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/6</guid>
  <pubDate>2021-06-16</pubDate>
  <description><![CDATA[<h2>Guide</h2>
<ul>
<li>Modern WebGL tutorials that teach WebGL from basic principles
<ul>
<li><a href="https://webglfundamentals.org" rel="nofollow">WebGL Fundamentals</a></li>
<li><a href="https://webgl2fundamentals.org" rel="nofollow">WebGL2 Fundamentals</a></li>
</ul>
</li>
</ul>
<h2>Open Source</h2>
<ul>
<li><a href="https://github.com/oframe/ogl">ogl</a> - Minimal WebGL Library</li>
<li><a href="https://github.com/oasis-engine/engine">oasis-engine</a> - Oasis Engine is a web-first and mobile-first high-performance real-time development platform.</li>
<li><a href="https://github.com/deepkolos/three-platformize">three-platformize</a> - 一个让 THREE 平台化的项目，目前已适配微信，淘宝，头条小程序，微信小游戏</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[React状态管理]]></title>
  <link>https://github.com/lencx/fzj/discussions/11</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/11</guid>
  <pubDate>2021-06-16</pubDate>
  <description><![CDATA[<h2>Open Source</h2>
<ul>
<li><a href="https://github.com/facebookexperimental/recoil">recoil</a> - Recoil is an experimental state management library for React apps. It provides several capabilities that are difficult to achieve with React alone, while being compatible with the newest features of React.</li>
<li><a href="https://github.com/reduxjs/react-redux">react-redux</a> - Official React bindings for Redux.
<ul>
<li><a href="https://github.com/reduxjs/redux-toolkit">@reduxjs/toolkit</a> - The official, opinionated, batteries-included toolset for efficient Redux development</li>
</ul>
</li>
<li><a href="https://github.com/mobxjs/mobx">mobx</a> - Simple, scalable state management.</li>
<li><a href="https://github.com/dvajs/dva">dva</a> -  <g-emoji class="g-emoji" alias="seedling" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png">🌱</g-emoji> React and redux based, lightweight and elm-style framework. (Inspired by elm and choo)
<ul>
<li><a href="https://github.com/umijs/plugins/tree/master/packages/plugin-model">@umijs/plugin-model</a> -A simple state management solution based on hooks (can be replacement of dva in some cases).</li>
</ul>
</li>
<li><a href="https://github.com/immerjs/immer">immer</a> - Create the next immutable state by mutating the current one.</li>
<li><a href="https://github.com/jamiebuilds/unstated-next">unstated-next</a> - 200 bytes to never think about React state management libraries ever again.</li>
<li><a href="https://github.com/effector/effector">effector</a> - The state manager <g-emoji class="g-emoji" alias="comet" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2604.png">☄️</g-emoji></li>
<li><a href="https://github.com/pmndrs/valtio">valtio</a> - <g-emoji class="g-emoji" alias="pill" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png">💊</g-emoji> Valtio makes proxy-state simple for React and Vanilla.</li>
<li><a href="https://github.com/ctrlplusb/easy-peasy">easy-peasy</a> - Vegetarian friendly state for React.</li>
<li><a href="https://github.com/diegohaz/constate">constate</a> - React Context + State</li>
<li><a href="https://github.com/RisingStack/react-easy-state">react-easy-state</a> - Simple React state management. Made with <g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png">❤️</g-emoji> and ES6 Proxies.</li>
<li><a href="https://github.com/lostpebble/pullstate">pullstate</a> - Simple state stores using immer and React hooks - re-use parts of your state by pulling it anywhere you like!</li>
</ul>
<h2>Browser Extension</h2>
<ul>
<li><a href="https://github.com/reduxjs/redux-devtools">Redux DevTools</a> - DevTools for Redux with hot reloading, action replay, and customizable UI.</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[TODO]]></title>
  <link>https://github.com/lencx/fzj/discussions/20</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/20</guid>
  <pubDate>2021-06-16</pubDate>
  <description><![CDATA[<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> <a href="https://github.com/lencx/rgd">https://github.com/lencx/rgd</a> - github discussions 生成 RSS</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="918242444" data-permission-text="Title is private" data-url="https://github.com/lencx/vite-plugin-rsw/issues/9" data-hovercard-type="issue" data-hovercard-url="/lencx/vite-plugin-rsw/issues/9/hovercard" href="https://github.com/lencx/vite-plugin-rsw/issues/9">lencx/vite-plugin-rsw#9</a> - rsw插件模板生成</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[技术名词解释（一）]]></title>
  <link>https://github.com/lencx/fzj/discussions/31</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/31</guid>
  <pubDate>2021-06-16</pubDate>
  <description><![CDATA[<h2>云计算</h2>
<p>云计算（英语：cloud computing），也被意译为网络计算，是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的电脑基建作计算和资源。</p>
<p>云计算是指在云中运行工作负载，而云是一种能够抽象、汇集和共享整个网络中的可扩展资源的 IT 环境。云计算和云本身都不属于技术的范畴。</p>
<ul>
<li>云计算是指在云中运行工作负载的功能。</li>
<li>而云是一种环境，是运行应用的地方。</li>
<li>技术则是指用于构建和使用云的软件和硬件。</li>
</ul>
<h3>SaaS</h3>
<p>软件即服务（英语：Software as a Service，缩写：SaaS，发音：sæs或sɑs），亦可称为“按需即用软件”（即“一经要求，即可使用”），它是一种软件交付模式。在这种交付模式中，软件仅需通过网络，不须经过传统的安装步骤即可使用，软件及其相关的数据集中托管于云端服务。用户通常使用精简客户端，一般即经由网页浏览器来访问、访问软件即服务。SaaS 最大的特色在于软件本身并没有被下载到用户的硬盘，而是存储在提供商的云端或者服务器。对比传统软件需要花钱购买，下载。软件即服务只需要用户租用软件，在线使用，不但大大减少了用户购买风险, 也无需下载软件本身，无设备要求的限制。</p>
<h3>IaaS</h3>
<p>基础设施即服务（英语：Infrastructure as a Service，简称IaaS）是提供消费者处理、储存、网络以及各种基础运算资源，以部署与执行操作系统或应用程序等各种软件。</p>
<p>IaaS 是云服务的最底层，主要提供一些基础资源。它与 PaaS 的区别是，用户需要自己控制底层，实现基础设施的使用逻辑。 客户端无须购买服务器、软件等网络设备，即可任意部署和运行处理、存储、网络和其它基本的计算资源，不能控管或控制底层的基础设施，但是可以控制操作系统、储存装置、已部署的应用程序，有时也可以有限度地控制特定的网络元件，像是主机端防火墙。</p>
<h3>PaaS</h3>
<p>平台即服务（英语：platform as a service，缩写：PaaS）是一种云计算服务，提供运算平台与解决方案服务。在云计算的典型层级中，PaaS层介于软件即服务与基础设施即服务之间。</p>
<p>PaaS提供用户将云端基础设施部署与创建至客户端，或者借此获得使用编程语言、程序库与服务。用户不需要管理与控制云端基础设施（包含网络、服务器、操作系统或存储），但需要控制上层的应用程序部署与应用托管的环境。</p>
<p>PaaS将软件研发的平台做为一种服务，以软件即服务（SaaS）模式交付给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。</p>
<p>PaaS 提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。</p>
<h3>BaaS</h3>
<p>后端即服务 (BaaS) 使开发人员可以专注于应用程序的前端，无需构建或维护后端服务即可利用。BaaS 和无服务器计算有一些相似之处，许多提供商都提供两者，但是两种模型有一些差异。</p>
<h3>FaaS</h3>
<p>功能即服务 (FaaS) 是一类云计算服务，它提供了一个平台，允许客户开发、运行和管理应用程序功能，而无需构建和维护通常与开发和启动应用程序相关的基础设施。按照此模型构建应用程序是实现“无服务器”架构的一种方式，通常用于构建微服务应用程序。</p>
<h3>DaaS</h3>
<p>在计算领域，数据即服务（Data as a service，简称DaaS）是指在线数据服务，开发者将开发用的数据保存在互联网上并随时访问，而无需使用保存在本地计算机上的数据库。</p>
<hr>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97" rel="nofollow">[wiki] 云计算</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud" rel="nofollow">什么是云计算？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-native-apps/what-is-serverless" rel="nofollow">什么是无服务器？</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1" rel="nofollow">[wiki] 软件即服务</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E5%8F%B0%E5%8D%B3%E6%9C%8D%E5%8A%A1" rel="nofollow">[wiki] 平台即服务</a></li>
<li><a href="https://azure.microsoft.com/zh-cn/overview/what-is-paas" rel="nofollow">什么是 PaaS？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-computing/what-is-paas" rel="nofollow">什么是平台即服务（PaaS）？PaaS SaaS IaaS 区别解析</a></li>
<li><a href="https://en.wikipedia.org/wiki/Mobile_backend_as_a_service" rel="nofollow">[wiki] Mobile backend as a service</a></li>
<li><a href="https://www.cloudflare.com/zh-cn/learning/serverless/glossary/backend-as-a-service-baas/" rel="nofollow">什么是 BaaS？|后端即服务与无服务器</a></li>
<li><a href="https://en.wikipedia.org/wiki/Function_as_a_service" rel="nofollow">Function as a service</a></li>
<li><a href="https://www.cloudflare.com/zh-cn/learning/serverless/glossary/function-as-a-service-faas/" rel="nofollow">什么功能即服务 (FaaS)？</a></li>
<li><a href="https://www.redhat.com/zh/topics/cloud-native-apps/what-is-faas" rel="nofollow">什么是功能即服务（FaaS）？</a></li>
<li><a href="https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/" rel="nofollow">从IaaS到FaaS—— Serverless架构的前世今生</a></li>
<li><a href="https://www.ibm.com/cloud/learn/faas" rel="nofollow">FaaS (Function-as-a-Service)</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A%E5%8D%B3%E6%9C%8D%E5%8B%99" rel="nofollow">[wiki] 数据即服务</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[静态网站生成器]]></title>
  <link>https://github.com/lencx/fzj/discussions/7</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/7</guid>
  <pubDate>2021-06-15</pubDate>
  <description><![CDATA[<blockquote>
<p>文档及建站</p>
</blockquote>
<h2>Rust</h2>
<ul>
<li><a href="https://github.com/rust-lang/mdBook">mdbook</a> - Create book from markdown files. Like Gitbook but implemented in Rust.
<ul>
<li><a href="https://github.com/lzanini/mdbook-katex">mdbook-katex</a> - A preprocessor for mdBook, rendering LaTex equations to HTML at build time.</li>
<li><a href="https://github.com/badboy/mdbook-mermaid">mdbook-mermaid</a> - A preprocessor for mdbook to add mermaid support.</li>
</ul>
</li>
<li><a href="https://github.com/cobalt-org/cobalt.rs">cobalt</a> - Static site generator written in Rust.</li>
<li><a href="https://github.com/getzola/zola">zola</a> - A fast static site generator in a single binary with everything built-in.</li>
</ul>
<h2>Node.js</h2>
<ul>
<li>Vue
<ul>
<li><a href="https://vuepress.vuejs.org" rel="nofollow">VuePress</a> - Vue-powered Static Site Generator.</li>
<li><a href="https://vitepress.vuejs.org" rel="nofollow">VitePress</a> - VitePress is VuePress' little brother, built on top of Vite.</li>
<li><a href="https://sli.dev" rel="nofollow">Slidev</a> - Presentation Slides for Developers.</li>
</ul>
</li>
<li>React
<ul>
<li><a href="https://www.gatsbyjs.com" rel="nofollow">Gatsby</a> - Gatsby provides development teams an open source frontend framework for creating rich, optimized websites and a cloud platform for delivering them on a blazing fast edge network.</li>
<li><a href="https://d.umijs.org" rel="nofollow">dumi</a> - A doc tool can assist you to develop libraries &amp; write docs.</li>
</ul>
</li>
<li><a href="https://hexo.io" rel="nofollow">Hexo</a> - A fast, simple &amp; powerful blog framework.</li>
<li><a href="https://github.com/11ty/eleventy">eleventy <g-emoji class="g-emoji" alias="clock11" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png">🕚</g-emoji><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji></a> - A simpler static site generator. An alternative to Jekyll. Transforms a directory of templates (of varying types) into HTML.</li>
</ul>
<h2>Other</h2>
<ul>
<li><a href="https://github.com/jgm/pandoc">pandoc</a> - Universal markup converter</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[黑客与画家 (Hackers & Painters)]]></title>
  <link>https://github.com/lencx/fzj/discussions/25</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/25</guid>
  <pubDate>2021-06-14</pubDate>
  <description><![CDATA[<blockquote>
<p><a href="http://www.paulgraham.com" rel="nofollow">作者: 保羅·格雷厄姆 (Paul Graham)</a><br>
<a href="http://www.ruanyifeng.com" rel="nofollow">译: 阮一峰</a></p>
</blockquote>
<hr>
<ul>
<li>
<p>出于兴趣而解决某个难题，不管它有没有用，这就是黑客。</p>
</li>
<li>
<p>黑客伦理(hacker ethic)</p>
<ul>
<li>使用计算机以及所有有助于了解这个世界本质的事物都不应该受到任何限制。任何事情都应该亲手尝试。<br>
(Access to computers-and anything that might teach you something about the way the world works-should be unlimited and total. Always yield to the Hands-On Imperative!)</li>
<li>信息应该全部免费。<br>
(All information should be free.)</li>
<li>不信任权威，提倡去中心化。<br>
(Mistrust Authority-Promote Decentralization.)</li>
<li>判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准。<br>
(Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, or position.)</li>
<li>你可以用计算机创造美和艺术。<br>
(You can create art and beauty on a computer.)</li>
<li>计算机使生活更美好。<br>
(Computers can change your life for the better.)</li>
</ul>
<p><strong>根据这六条“黑客伦理”，黑客价值观的核心原则可以概括成这样几点：分享、开放、民主、计算机的自由使用、进步。</strong></p>
</li>
<li>
<p>计算机程序只是文本而已。你选择什么语言，决定了你能说什么话。编程语言就是程序员的思维方式。</p>
</li>
</ul>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Leon_Battista_Alberti" rel="nofollow">阿尔伯蒂</a>有一句名言：“任何一种艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须全身心投入。”</li>
</ul>
<h2>黑客与画家</h2>
<ul>
<li>
<p>黑客搞懂“计算理论”(theory of computation)的必要性，与画家搞懂颜料化学成分的必要性差不多大。一般来说，在理论上，你需要知道如何计算“时间复杂度”和“空间复杂度”(time and space complexity)；如果你要写一个解释器，可能还需要知道状态机(state machine)的概念；除此以外，并不需要知道特别多的理论。这些可比画家必须记住的颜料成分少很多。</p>
</li>
<li>
<p>因为如果你不爱一件事，你不可能把它做得真正优秀，要是你很热爱编程，你就不可避免地会开发你自己的项目。</p>
</li>
<li>
<p>黑客就像画家，工作起来是有心理周期的。有时候，你有了一个令人兴奋的新项目，你会愿意为它一天工作16个小时。等过了这一阵，你又会觉得百无聊赖，对所有事情都提不起兴趣。</p>
</li>
<li>
<p>对于编程，这实际上意味着你可以把<code>bug</code>留到以后解决。消灭<code>bug</code>对我来说属于轻松的工作，只有在这个时候，编程才变得直接和机械，接近社会大众想象中的编程的样子。消灭<code>bug</code>的过程就像解一道数学题，已知许许多多的约束条件，你只要根据条件对方程求解就可以了。你的程序应该能产生x结果，但是却产生了y结果。哪里出错了？你知道自己最后肯定能够解决这个问题，所以做起来很轻松，就好像刷墙一样，接近于休闲了。</p>
</li>
<li>
<p>“程序写出来是为了让人看懂它的算法，附带告诉计算机如何执行。”一种好的编程语言应该比英语更容易解释软件。只有在那些不太成熟、容易出现问题的地方，你才应该加上注释，提醒读者注意那里，就好像公路上只有在急转弯处才会出现警示标志一样。</p>
</li>
</ul>
<h2>不能说的话</h2>
<ul>
<li>
<p>大多数成年人故意让孩子对世界有一个错误的认识。最鲜明的例子之一就是圣诞老人。我们觉得，小孩子相信圣诞老人，真是太可爱了。我本人其实也是这样想。但是，扪心自问，我们向孩子灌输圣诞老人的神话，到底是为了孩子，还是为了我们自己？</p>
<p>我在这里不讨论这样做是否正确。家长想要塑造孩子的心灵，把他们装扮成可爱的小宝宝，这可能是无法避免的。我也可能这样做。但是，就本文而言，这样做会产生一个重要的结果，那就是孩子“被迫”在一个精心设计的环境中长大。他的头脑或多或少是纯洁无暇的，一点也不知道那些“不能说的话”，从来没有被真实的社会生活“污染”过。孩子眼里的世界是不真实的，是一个被灌输进他们头脑的假想世界。将来当孩子长大以后接触社会，就会发现小时候以为真实的事情，在是现实世界中是荒唐可笑的。</p>
</li>
<li>
<p>那些团体神经越紧张，它们所产生的禁止力量就越大。伽利略因为宣布日心说而遭到教廷的审判，这件事讽刺的地方在于，他只是在宣传哥白尼的观点，而后者却安然无恙。事实上，哥白尼不仅不反对教廷，还是一个虔诚的天主教教士，他把自己的著作献给教皇。不幸的是，伽利略正赶上教廷内部反对派上台，宗教改革制度压制，任何非正统的思想遭受到前所未有的严厉控制和禁止。</p>
<p>为了在全社会制造出一个禁忌，负责实施的团体必定既不是特别强大也不是特别弱小。如果一个团体强大到无比自信，它根本不会在乎别人的抨击。美国人或者英国人对国外媒体的诋毁就毫不在意。但是一个团体太弱小，就会无力推行禁忌。有一种行为怪癖叫做“嗜粪症”(coprophila)，它的患者人数以及影响势力眼下似乎就不太强大，无法把自己的观点推广给其他人。</p>
<p>我猜想，道德禁忌的最大制造者是那些权利斗争中略占上风的一方。你会发现，这一方有实力推行禁忌，同时又软弱到需要用禁忌来保护自己的利益。</p>
<p>大多数的斗争，不管它们实际上争的是什么，都会以思想斗争的形式表现出来。</p>
</li>
</ul>
<h2>为什么这样做</h2>
<ul>
<li>
<p>有人可能会问，为什么要去找出“不能说的话”？为什么要故意打探那些龌龊的，见不得人的思想观点？你明知那里有挡住去路的石头，为什么还要把它们翻过来看个究竟呢？</p>
<p>首先，我这样做与小孩子翻石头是出于同样的原因：纯粹的好奇心。我对任何被禁止的东西都有特别强烈的好奇心。我要亲眼看一下，然后自己做决定。</p>
<p>其次，我这样做是因为我不喜欢犯错。如果像其他时代一样，那些我们自以为正确的事情将来会被证明是荒唐可笑的，我希望自己能够知道是哪些事情，这样可以使我不会上当。</p>
<p>再次，我这样做，是因为这是很好的脑力训练。<code>想要做出优秀作品，你需要一个什么问题都能思考的大脑。尤其是那些似乎不应该思考的问题，你的大脑也要养成思考它们的习惯。</code></p>
<p>优秀作品往往来自于其他人忽视的想法，而最被忽视的想法就是那些被禁止的思想观点。</p>
</li>
<li>
<p>“守口如瓶”的真正缺点在于，你从此无法享受讨论带来的好处了，讨论一个观点会产生更多的观点，不讨论就什么观点也没有。所以，如果可能的话，你最好找一些信得过的知己，只与他们畅所欲言、无所不谈。这样不仅可以获得新观点，还可以用来选择朋友。能够一起谈论“异端邪说”并且不会因此气急败坏的人，就是你最应该认识的朋友。</p>
</li>
<li>
<p>你不仅要远距离观察人群，更要远距离观察你自己。顺便提一句，这可不是激进的想法。儿童和成年人的主要差别就在这里。儿童精疲力竭时，可能会大发脾气，因为他不知道为了什么；成年人则会了解是个人的身体状况问题，与外界无关，说一句“没关系，我只是累了”。我想，通过类似的机制，一个人完全可以识别和抵制外界流行的道德观念，把它们与内心世界相分离。</p>
<p>如果你想要清晰的思考，就必须远离人群。但是走的越远，你的处境就会越困难，受到的阻力也会越大，因为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。</p>
<p>如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。问自己，什么话是我不能说的？为什么？</p>
</li>
</ul>
<h2>另一条路</h2>
<ul>
<li>
<p>如果软件的新版本要等一年后才能发布，我就会把大部分新构思束之高阁，至少过上一段时间再来考虑。但是，构思这种东西有一个特点，那就是它会导致更多的构思。你有没有注意过，坐下来写东西的时候，一半的构思是写作时产生的？软件也是这样。实现某个构思，会带来更多的构思。所以，将一个构思束之高阁，不仅意味着延迟它的实现，还意味着延迟所有在实现过程中激发的构思。事实上，将一个构思束之高阁，甚至会限制新构思的产生。因为你看一眼堆放在一边、还没实现的构思，就会想“我已经为下一个版本准备了很多新东西要实现了”，你就懒得再去思考更多的新功能了。</p>
</li>
<li>
<p>现在，创业公司有更多的理由选择互联网软件创业，因为开发桌面软件越来越乏味了。如果你现在开发桌面软件，就不得不接受微软公司的授权条款，调用它的API，为它那个bug百出的操作系统伤透脑筋。历尽千辛万苦，你最终写出了一个受大众欢迎的软件，这时你可能会发现，你所做的一切其实只是在为微软公司做市场调查。</p>
</li>
<li>
<p>你能够做到这一点，意味着竞争者也能做到这一点，所以长时间工作变成了一种必须，不得不如此。<code>因为你能做到，所以你必须做到</code>。这简直就是逆向的<a href="https://en.wikipedia.org/wiki/Law_of_triviality" rel="nofollow">帕金森定律</a></p>
</li>
<li>
<p>不少公司都很想知道，什么事情可以外包，什么事情不可以外包，一个可能的答案是，公司内部所有不直接感受的竞争压力的部门都应该外包出去，让它们暴露在竞争压力之下。（我这里所说的“外包”，指的是聘请另一家公司来执行，而不是指把业务部门转移到海外。）</p>
</li>
<li>
<p>由于个人经历的关系，特雷弗·布莱克韦尔对这一点的认识可能比其他任何人都深刻。他写到：“我会进一步说，由于互联网软件的程序员非常辛苦，所以会使得经济优势根本性地从大公司向创业公司转移。互联网软件要求的那种工作强度和付出，只有当公司是其本人所有时，程序员才愿意提供。软件公司可以雇用到能干的人，让他们去干轻松的事情，也可以雇到不能干的人，让他们去干艰苦的事情。但是无法雇到非常能干的人，让他们去干非常艰苦的事情。因为互联网软件的创业不需要太多的资本，所以大公司可以与创业公司竞争的优势就所剩无几了。”</p>
</li>
</ul>
<h2>如何创造财富</h2>
<ul>
<li>
<p>交换媒介的优点是，它使得交易可以进行下去。缺点是，它往往模糊了交易的实质。人们觉得做生意就是为了挣钱，但是金钱其实只是一种中介，让大家可以更方便地获得自己想要的东西。大多数生意的目的是为了创造财富，做出人们真正需要的东西。</p>
</li>
<li>
<p>金钱不是财富，而只是我们用来转移财富所有权的的东西。</p>
</li>
<li>
<p>公司就是许多人聚在一起创造财富的地方，能够制造更多人们需要的东西。</p>
</li>
<li>
<p>我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给外界。</p>
</li>
<li>
<p>一个大学毕业生总是想“我需要一份工作”，别人也是这么对他说的，好像变成某个组织的成员是一件多么重要的事情。更直接的表达方式应该是“你需要去做一些人们需要的东西”。即使不加入公司，你也能做到。公司不过是一群人在一起工作，共同做出某种人们需要的东西。真正重要的是做出人们需要的东西，而不是加入某个公司。</p>
<p>对于大多数人来说，最好的选择可能是为某个现存的公司打工。但是，理解这种行为的真正含义对你没有什么坏处。工作就是在一个组织中，与许多人共同合作，做出某种人们需要的东西。</p>
</li>
<li>
<p>要致富，你需要两样东西：<code>可测量性</code>和<code>可放大性</code>。你的职位产生的业绩，应该是可测量的，否则你做的再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应。</p>
</li>
<li>
<p>如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。</p>
</li>
<li>
<p>乔布斯曾经说过，创业的成败取决于最早加入公司的那十个人。我基本同意这个观点，虽然我觉得真正决定成败的其实 只是前五人。小团队的优势不在于它本身的小，而在于你可以选择成员。我们不需要小村庄的那种“小 ”，而需要全明星第一阵容的那种“小”。</p>
</li>
<li>
<p>什么是技术？技术就是某种手段，就是我们做事的方式。如果你发现了一种做事的新方式，它的经济价值就取决于有多人使用这种新方式。技术就是钓鱼的鱼竿，而不是那条鱼。</p>
</li>
<li>
<p>只要懂得藏富于民，国家就会变得强大。让书呆子保住他们的血汗钱，你就会无敌于天下。</p>
</li>
<li>
<p>“财富”这个词有很多意思，有些并不是指物质财富。我不想做深入讨论，研究到底什么才是真正的财富。我这里指的只是一种特定的技术层面上的“财富” ——人们用金钱向你交换东西。这是一种很有趣、很值得研究的财富，因为它使得你免于饥饿，而且人们是否用金钱交换这种财富取决于他们，而不是取决于你。</p>
</li>
</ul>
<h2>关注贫富分化</h2>
<ul>
<li>
<p><code>事实上，财富和金钱是两个概念。金钱只是用来交易财富的一种手段</code>，财富才是有价值的东西，我们购买的商品和服务都属于财富。你到 海外旅游时，不用看当地人的银行账户就会知道你来到的是富国还是穷国。你只要看看他们的财富就行了：建筑、街道、服装、健康状况等。</p>
</li>
<li>
<p>技术的发展使得通过创造而积累财富的速度第一次有可能超过通过偷窃而积累财富的速度。19世纪典型的富人不是宫廷朝臣，而是实业家。</p>
</li>
</ul>
<h2>设计者的品味</h2>
<ul>
<li>
<p>对于建筑师和设计者，它意味着美依赖于一些精心选择的结构性元素，而不是依赖于表面装饰品的堆砌。(装饰品本身并不是坏事，只有它被用来掩盖结构的苍白时，才变成了一件坏事。)</p>
</li>
<li>
<p>如果解决方法是丑陋的，那就肯定还有更好的解决方法，只是还没有发现而已。</p>
</li>
<li>
<p>白描其实是最难画的视觉媒介，因为它们要求近乎完美的再现。用数学语言说，线条属于闭合解(closed-form-solution)，水平不够的艺术家没有办法直接解决问题，只能通过不断逼近来求解。</p>
</li>
<li>
<p>人们有时会说自己有了“状态”，我的理解是，他们这时可以控制自己的脊髓。脊髓是更本能的反应，面对难题时，它能释放你的直觉。</p>
</li>
<li>
<p>好设计是模仿大自然的设计。我不是说模仿大自然这种行为本身有多么好，而是说大自然在长期的演化中已经解决了很多设计问题。所以，如果你的设计与大自然很接近，那么它基本上不会很差。</p>
</li>
</ul>
<h2>一百年后的编程语言</h2>
<ul>
<li>
<p>在长期的职业生涯中，我发现冗余的代码会导致更多冗余的代码，不仅软件如此，而且像我这样性格懒散的人，我发现在床底下和房间的角落里这个命题也成立，一件垃圾会产生更多的垃圾。</p>
</li>
<li>
<p>编程语言进化缓慢的原因在于它们并不是真正的技术。语言只是一种书写法，而程序则是一种严格符合规则的描述，以书面形式记录计算机应该如何解决你的问题。所以，编程语言的进化速度更像数学符号的进化速度，而不像真正的技术(比如交通或者通信技术)的进化速度。数学符号的进化是缓慢的渐变式变化，而不是真正技术的那种跳跃式发展。</p>
</li>
<li>
<p>我已经预测到了，一旦未来硬件的性能大幅提高将会发生什么事。新增加的运算能力都会被糟蹋掉。</p>
<p>在我学习编程的年代，计算机还是稀罕玩意。我记得当时使用的微机型号是TRS-80，它的内存只有4K，为了把BASIC程序装入内存，我不得不把源码中的空格全部删除。我一想到那些极其低效率的软件，不断重复某些愚蠢的运算，把硬件的计算能力全部占用，就感到无法忍受。但是，我的这种反应是错的，我就像某个出身贫寒的穷孩子，一听到要花钱就舍不得，即使把钱用在重要场合(比如去医院看病)都会觉得难以接受。</p>
</li>
</ul>
<h2>书呆子的复仇</h2>
<ul>
<li>如果你想在软件业获得成功，就使用你知道的最强大的语言，用它解决你知道的最难的问题，并且等待竞争对手的经理做出自甘平庸的选择。</li>
</ul>
<h2>梦寐以求的编程语言</h2>
<ul>
<li>
<p>编程语言不是存在于真空之中，“编程”其实是及物动词，黑客一般都是为某个系统编程。在现实中，编程语言总是与它们依附的系统联系在一起的。</p>
</li>
<li>
<p>无法以一种语言本身的优缺点评判这种语言。另一个结果则是，只有当一种语言是某个系统的脚本语言时，它才能真正成为编程语言。如果你对此很吃惊，觉得不公平，那么我会跟你说不必大惊小怪。这就好比大家都认为，如果一种编程语言只有语法规则，没有一个好的实现(implementation)，那么它就不能算完整的编程语言。这些都是很正常很合理的事情，编程语言本来就该如此。</p>
</li>
<li>
<p>你只需要不停地重复同一句话，最终人们将会开始倾听。人们真正注意到你的时候，不是第一眼就看到你站在那里，而是发现过了这么久你居然还在那里。</p>
</li>
<li>
<p>著名散文家E.B.怀特说过，“最好的文字来自不停的修改”。</p>
</li>
<li>
<p>为了写出优秀软件，你必须同时具备两种相互冲突的信念。一方面，你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。在你的大脑中，有一个声音说：“千难万险只等闲”，还有一个声音却说“早岁哪知世事艰”。</p>
<p>这里的难点在于你要意识到，实际上两种信念并不矛盾。你的乐观主义和怀疑倾向分别针对两个不同的对象。你必须对解决难题的可能性保持乐观，同时对当前解法的合理性保持怀疑。</p>
<p>做出优秀成果的人，在做的过程中常常觉得自己做得不够好。其他人看到他们的成果觉得棒极了，而创造者本人看到的都是自己作品的缺陷。这种视角的差异并非偶然，因为只有对现状不满，才会造就杰出的成果。</p>
</li>
<li>
<p>因此现实中，尽管软件功能越来越强大，内部接口却往往一成不变，成为整个系统中拖后腿的部分。</p>
<p>一种可能的解决方法是，将软件内部的接口设计成垂直接口而不是水平接口。这意味着软件内部的模块是一个个垂直堆积起来的抽象层，层与层之间的接口完全由其中的一层控制。如果较高的一层使用了较低的一层定义的语言，那么接口就由较低的一层控制；如果较低的一层从属于较高的一层，那么接口就由较高的一层控制。</p>
</li>
<li>
<p>帕金森定律(Parkinson's Law)的一种原始表达形式是“工作总是到最后一刻才会完成”，后来引申到计算机领域就变成了“数据总是会填满所有的空间”，更一般性的总结则是：“对一种资源的需求总是会消耗光这种资源的所有供应”。</p>
</li>
</ul>
<h2>设计与研究</h2>
<ul>
<li>
<p>设计与研究的区别看来就在于，前者追求“好”(good)，后者追求“新”(new)。优秀的设计不一定很“新”，但必须是“好”的；优秀的研究不一定很“好”，但必须是“新”的。我认为这两条道路最后会发生交叉：只有应用“新”的创新和理论，才会诞生超越前人的最佳设计；只有解决那些值得解决的难题(也就是“好”的难题)，才会诞生最佳研究。所以，最终来说，设计和研究都通向同一个地方，只是前进的路线不同罢了。</p>
</li>
<li>
<p>怎么理解编程语言？你不要把它看成那些已完成的程序的表达方式，而应该把它理解成促进程序从无到有的一种媒介。这里的意思是说，成品的材料和开发时用的材料其实是不一样的。搞艺术的人都知道，这两个阶段往往需要不同的媒介。比如，大理石是一种非常良好、耐用的材料，很适合用于最后的成品，但是它极其缺乏弹性和灵活性，所以不适合在构思阶段用来做模型。</p>
<p>最后写出来的程序就像已经完成的数学证明一样，是一棵经过精心修剪的树木，上面杂乱滋生的树杈 都已经被剪去了。所以，评价一种语言的优劣不能简单地看最后的程序是否表达得很漂亮，而要看程序从无到有的那条完成路径是否很漂亮。</p>
</li>
<li>
<p>画家之间甚至流传着一句谚语：<code>“画作永远没有完工的一天，你只是不再画下去而已。”</code></p>
</li>
<li>
<p>“弱即是强”指的是一种软件传播的模式，由Common Lisp专家里查德·加布里埃尔(Richard P. Gabriel)于1991年在<a href="http://www.dreamsongs.com/WIB.html" rel="nofollow">Lisp: Good News, Bad News, How to Win Big</a>一文中首先提出。它的含义非常广泛，涉及软件设计思想的各个方面，其中的一个重要结论就是软件功能的增加并不必然带来质量的提高。有时候，更少的功能(“弱”)反而是更好的选择(“强”)，因为这会使得软件的可用性提高。相比那些体积庞大、功能全面、较难上手的软件，一种功能有限但易于使用的软件可能对用户有更大的吸引力。加布里埃尔本人经常举Unix和C语言的例子，Unix和C在设计上考虑了实际环境，放弃了一些功能，但是保证了简单性，这使得它们最终在竞争中胜出，成为主流操作系统和编程语言。</p>
</li>
</ul>
<h2>术语解释</h2>
<ul>
<li><code>抽象(abstract)</code>: 隐藏细节。编程语言越抽象，你写出程序所需的运算步骤就越少，每一步的功能就越强。</li>
<li><code>算法(algorithm)</code>: 完成任务的方法。</li>
<li><code>Blub困境(Blub Paradox)</code>: 程序员的思想往往会受到自己正在使用的语言的束缚，不相信还存在更强大的语言。</li>
<li><code>复杂性(complexity)</code>: 算法的“时间复杂性”(time complexity) 指的是，当输入的数据量不断增加时，计算机完成过这种算法所消耗的时间</li>
<li><code>散列表(hash table)</code>: 一种类似数据库的数据结构，存储在里面的每一段数据都有一个对应的键，使用时只要按照键名就可以取出对应的数据。</li>
<li><code>函数库(library)</code>: 已经写好的代码片段，可以用来执行特定任务。</li>
<li><code>宏(macro)</code>: 一个能够生成其他程序的程序。</li>
<li><code>元循环(metacircular)</code>: 当一种语言的解释器用这种语言本身开发时，就会出现这种情况。与其说这是为了做出这种语言的一种实现，还不如说这是描述语言的一种技巧。</li>
<li><code>方法(method)</code>: 面向对象编程中充当某个类的属性的一个子程序。</li>
<li><code>模块(module)</code>: 一组子程序和变量，它们可以被视为是一个整体。通常情况下，模块外部的代码只能访问模块内部一部分专门对外公开的子程序和变量</li>
<li><code>目标码(object code)</code>: 编译器产生的机器语言。</li>
<li><code>OO(面向对象 object-oriented)</code>: 一种组织程序的方式。假定不同的类代表不同类型的数据，那么针对这些数据执行某种特定任务的代码，可以根据数据的不同被分别写进不同的类，成为这些类的方法。</li>
<li><code>正交的(orthogonal)</code>: 彼此独立、能够以多种方式组合在一起的一组东西。(乐高积木)</li>
<li><code>解析器(parser)</code>: 读取输入的数据然后生成解析树的程序。</li>
<li><code>解析树(parser tree)</code>: 解析器读取源码后生成的数据结构。它是将源码翻译成机器语言的第一步。</li>
<li><code>管道(pipe)</code>: 将操作系统的各种命令连接起来的一种方式，使得一个命令的输出变成另一个命令的输入。</li>
<li><code>指针(pointer)</code>: 一块数据，它的值是另一块数据的内存地址。</li>
<li><code>进程(process)</code>: 在同时运行多个程序的操作系统中，同时被运行的程序之一。</li>
<li><code>QA(质量保证，Quality Assurance)</code>: 软件行业中负责找出和登记bug的人。</li>
<li><code>递归(recursive)</code>: 一种调用自身的算法。</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[人总是喜欢在固有思维下钻牛角尖]]></title>
  <link>https://github.com/lencx/fzj/discussions/30</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/30</guid>
  <pubDate>2021-06-14</pubDate>
  <description><![CDATA[<p><strong><code>2021.02.28</code></strong></p>
<p>最近这段时间写了一个基于 <code>vite</code> 的 <code>wasm-pack</code> (<code>Rust -&gt; Wasm</code>) 插件，遇到一个比较有意思的问题。</p>
<h3>需求</h3>
<p>实现一个 <code>rsw 插件</code>，当 vite 服务启动后，插件会自动调用 <code>wasm-pack</code> 的 cli，进行 build，生成 wasm 的 npm 包，当 rust 包目录下的文件变更时，能够进行重新进行 build (热更新)。</p>
<h3>问题</h3>
<p>实现需求其实很简单，但是如果只是这样实现插件，虽然能用，但是体验不好。每次启动服务都会先执行 cli 的 build (耗时有点长)，vite 的快速启动开发环境的体验全无。其实不分析也知道，cli 的 build 并非每次启动都需要执行。如果已经 build 过，则不需要再次执行。</p>
<p>于是，就有了第一版简单粗暴的实现方案，直接看目录中有没有 build 的文件存在，如果文件存在，则直接跳过执行，否则，执行 build。短短几行代码似乎就解决了问题。</p>
<div class="highlight highlight-source-js position-relative" data-snippet-clipboard-copy-content="// 核心代码：如果`package.json`存在则跳过执行
// https://github.com/lencx/vite-plugin-rsw/blob/69668e9bdb8322382e5d49d3e85b67a35354d7e0/src/compiler.ts#L82-L88
const pkgPath = path.resolve(root, getCrateName(_crate), 'pkg');
// vite startup optimization
try {
  fs.statSync(`${pkgPath}/package.json`).isFile();
  console.log(chalk.yellow(`[rsw::optimized] wasm-pack build ${getCrateName(_crate)}`));
} catch (e) {
  compileOne({ config: opts, crate: _crate, sync: true });
}
"><pre><span class="pl-c">// 核心代码：如果`package.json`存在则跳过执行</span>
<span class="pl-c">// https://github.com/lencx/vite-plugin-rsw/blob/69668e9bdb8322382e5d49d3e85b67a35354d7e0/src/compiler.ts#L82-L88</span>
<span class="pl-k">const</span> <span class="pl-s1">pkgPath</span> <span class="pl-c1">=</span> <span class="pl-s1">path</span><span class="pl-kos">.</span><span class="pl-en">resolve</span><span class="pl-kos">(</span><span class="pl-s1">root</span><span class="pl-kos">,</span> <span class="pl-en">getCrateName</span><span class="pl-kos">(</span><span class="pl-s1">_crate</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s">'pkg'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-c">// vite startup optimization</span>
<span class="pl-k">try</span> <span class="pl-kos">{</span>
  <span class="pl-s1">fs</span><span class="pl-kos">.</span><span class="pl-en">statSync</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">pkgPath</span><span class="pl-kos">}</span></span>/package.json`</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">isFile</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s1">chalk</span><span class="pl-kos">.</span><span class="pl-en">yellow</span><span class="pl-kos">(</span><span class="pl-s">`[rsw::optimized] wasm-pack build <span class="pl-s1"><span class="pl-kos">${</span><span class="pl-en">getCrateName</span><span class="pl-kos">(</span><span class="pl-s1">_crate</span><span class="pl-kos">)</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span> <span class="pl-k">catch</span> <span class="pl-kos">(</span><span class="pl-s1">e</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-en">compileOne</span><span class="pl-kos">(</span><span class="pl-kos">{</span> <span class="pl-c1">config</span>: <span class="pl-s1">opts</span><span class="pl-kos">,</span> <span class="pl-c1">crate</span>: <span class="pl-s1">_crate</span><span class="pl-kos">,</span> <span class="pl-c1">sync</span>: <span class="pl-c1">true</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<p>但是很快就打脸了，有一种情况是未考虑到的，就是在停止服务后修改文件，当启动服务后，因为之前 build 的文件一直都存在，所以并不会执行 build，只有在启动服务后，修改文件，才会触发热更新。</p>
<p>解决这个问题，我一直在想如何去缓存文件信息，做比较，如果两次文件内容都无变化，则文件未被修改过，但是又想到，如果文件特别多，<code>存储读取</code>又会产生新的问题，感觉问题被复杂化了，但是却没什么头绪。</p>
<p>和朋友讨论这个插件，朋友的一句话点醒了我。不需要存储读取文件，因为文件内容是不需要关心的，我们其实更关心的问题是文件是否被修改，而文件是否修改，可以通过查看文件修改时间。因为 build 是后于源码修改的，所以源码的修改时间一定小于 build 目录下的文件时间。如果源码修改时间大于了 build 目录下的文件时间。则表示文件修改了，但未执行 build。</p>
<p>这也就有了下面这段代码</p>
<div class="highlight highlight-source-js position-relative" data-snippet-clipboard-copy-content="// 核心代码：比较文件变更时间
// https://github.com/lencx/vite-plugin-rsw/blob/8aa0d68750/src/utils.ts#L85-L127
try {
  // benchmark file modified time
  const pkgMtime = fs.statSync(benchmarkFile).mtimeMs;
  const cargoMtime = fs.statSync(cargoToml).mtimeMs;
  let isOptim = true;

  // run wasm-pack
  if (cargoMtime &gt; pkgMtime) {
    isOptim = false;
    return runCallback();
  }

  (function dirsMtime(dir) {
    for (let f of fs.readdirSync(dir)) {
      const _f = fs.statSync(`${dir}/${f}`);

      if (_f.isDirectory()) {
        if (_f.mtimeMs &gt; pkgMtime) {
          // run wasm-pack
          isOptim = false;
          runCallback();
          break;
        } else {
          dirsMtime(`${dir}/${f}`)
        }
      }

      if (_f.isFile()) {
        if (_f.mtimeMs &gt; pkgMtime) {
          // run wasm-pack
          isOptim = false;
          runCallback();
          break;
        }
      }
    }
  })(dirs)

  isOptim &amp;&amp; optimCallback();
} catch(e) {
  // no such file or directory
  runCallback();
}
"><pre><span class="pl-c">// 核心代码：比较文件变更时间</span>
<span class="pl-c">// https://github.com/lencx/vite-plugin-rsw/blob/8aa0d68750/src/utils.ts#L85-L127</span>
<span class="pl-k">try</span> <span class="pl-kos">{</span>
  <span class="pl-c">// benchmark file modified time</span>
  <span class="pl-k">const</span> <span class="pl-s1">pkgMtime</span> <span class="pl-c1">=</span> <span class="pl-s1">fs</span><span class="pl-kos">.</span><span class="pl-en">statSync</span><span class="pl-kos">(</span><span class="pl-s1">benchmarkFile</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-c1">mtimeMs</span><span class="pl-kos">;</span>
  <span class="pl-k">const</span> <span class="pl-s1">cargoMtime</span> <span class="pl-c1">=</span> <span class="pl-s1">fs</span><span class="pl-kos">.</span><span class="pl-en">statSync</span><span class="pl-kos">(</span><span class="pl-s1">cargoToml</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-c1">mtimeMs</span><span class="pl-kos">;</span>
  <span class="pl-k">let</span> <span class="pl-s1">isOptim</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>

  <span class="pl-c">// run wasm-pack</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">cargoMtime</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">pkgMtime</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">isOptim</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> <span class="pl-en">runCallback</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span>

  <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-en">dirsMtime</span><span class="pl-kos">(</span><span class="pl-s1">dir</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">f</span> <span class="pl-k">of</span> <span class="pl-s1">fs</span><span class="pl-kos">.</span><span class="pl-en">readdirSync</span><span class="pl-kos">(</span><span class="pl-s1">dir</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">const</span> <span class="pl-s1">_f</span> <span class="pl-c1">=</span> <span class="pl-s1">fs</span><span class="pl-kos">.</span><span class="pl-en">statSync</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">dir</span><span class="pl-kos">}</span></span>/<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">f</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">_f</span><span class="pl-kos">.</span><span class="pl-en">isDirectory</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">_f</span><span class="pl-kos">.</span><span class="pl-c1">mtimeMs</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">pkgMtime</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// run wasm-pack</span>
          <span class="pl-s1">isOptim</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>
          <span class="pl-en">runCallback</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-k">break</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
          <span class="pl-en">dirsMtime</span><span class="pl-kos">(</span><span class="pl-s">`<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">dir</span><span class="pl-kos">}</span></span>/<span class="pl-s1"><span class="pl-kos">${</span><span class="pl-s1">f</span><span class="pl-kos">}</span></span>`</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span>
      <span class="pl-kos">}</span>

      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">_f</span><span class="pl-kos">.</span><span class="pl-en">isFile</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">_f</span><span class="pl-kos">.</span><span class="pl-c1">mtimeMs</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">pkgMtime</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// run wasm-pack</span>
          <span class="pl-s1">isOptim</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>
          <span class="pl-en">runCallback</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-k">break</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-s1">dirs</span><span class="pl-kos">)</span>

  <span class="pl-s1">isOptim</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">optimCallback</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span> <span class="pl-k">catch</span><span class="pl-kos">(</span><span class="pl-s1">e</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-c">// no such file or directory</span>
  <span class="pl-en">runCallback</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<h3>总结</h3>
<p>人很容易在固有思维下钻牛角尖，走到最后才发现自己虽然很努力，但似乎方向不太对。和朋友聊天，或者让自己放松一下，可能会有不一样的收获。</p>
<h3>相关链接</h3>
<ul>
<li><a href="https://github.com/lencx/vite-plugin-rsw">vite-plugin-rsw</a></li>
<li><a href="https://rustwasm.github.io/wasm-pack" rel="nofollow">wasm-pack</a></li>
<li><a href="https://webassembly.org" rel="nofollow">wasm</a> - webAssembly的简称</li>
<li><a href="https://vitejs.dev" rel="nofollow">vite</a> - 下一代前端构建工具</li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[在路上..🏃🏻‍♂️.]]></title>
  <link>https://github.com/lencx/fzj/discussions/29</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/29</guid>
  <pubDate>2021-06-14</pubDate>
  <description><![CDATA[<p><g-emoji class="g-emoji" alias="thinking" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png">🤔</g-emoji> 在迷茫，消极，思考中寻找自己的人生...</p>]]></description>
</item>
<item>
  <title><![CDATA[Rust国内镜像]]></title>
  <link>https://github.com/lencx/fzj/discussions/28</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/28</guid>
  <pubDate>2021-06-14</pubDate>
  <description><![CDATA[<p>macOS: <code>~/.cargo/config</code></p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="[source.crates-io]
registry = &quot;https://github.com/rust-lang/crates.io-index&quot;

# 替换成你偏好的镜像源
replace-with = 'sjtu'

# 清华大学
[source.tuna]
registry = &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;

# 中国科学技术大学
[source.ustc]
registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;

# 上海交通大学
[source.sjtu]
registry = &quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot;

# rustcc社区
[source.rustcc]
registry = &quot;git://crates.rustcc.cn/crates.io-index&quot;
"><pre>[<span class="pl-en">source</span>.<span class="pl-en">crates-io</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://github.com/rust-lang/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 替换成你偏好的镜像源</span>
<span class="pl-smi">replace-with</span> = <span class="pl-s"><span class="pl-pds">'</span>sjtu<span class="pl-pds">'</span></span>

<span class="pl-c"><span class="pl-c">#</span> 清华大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">tuna</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 中国科学技术大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">ustc</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>git://mirrors.ustc.edu.cn/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> 上海交通大学</span>
[<span class="pl-en">source</span>.<span class="pl-en">sjtu</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> rustcc社区</span>
[<span class="pl-en">source</span>.<span class="pl-en">rustcc</span>]
<span class="pl-smi">registry</span> = <span class="pl-s"><span class="pl-pds">"</span>git://crates.rustcc.cn/crates.io-index<span class="pl-pds">"</span></span></pre></div>
<hr>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn" rel="nofollow">清华大学开源软件镜像站</a> - 清华大学开源软件镜像站，致力于为国内和校内用户提供高质量的开源软件镜像、Linux 镜像源服务，帮助用户更方便地获取开源软件。本镜像站由清华大学 TUNA 团队负责维护。</li>
<li><a href="https://mirrors.ustc.edu.cn" rel="nofollow">中国科学技术大学开源软件镜像</a> - 是 Debian, Ubuntu, Fedora, Archlinux, CentOS 等多个发行版的官方源。目前是中国大陆高校访问量最大，收录最全的开源软件镜像。</li>
<li><a href="https://mirrors.sjtug.sjtu.edu.cn" rel="nofollow">上海交通大学 Linux 用户组 软件源镜像服务</a></li>
<li><a href="https://rustcc.cn" rel="nofollow">Rust语言中文社区</a></li>
</ul>]]></description>
</item>
<item>
  <title><![CDATA[终端插件汇总]]></title>
  <link>https://github.com/lencx/fzj/discussions/27</link>
  <guid isPermaLink="false">https://github.com/lencx/fzj/discussions/27</guid>
  <pubDate>2021-06-14</pubDate>
  <description><![CDATA[<ul>
<li>
<p><a href="https://github.com/microsoft/terminal">«win» Windows Terminal</a> - The new Windows Terminal and the original Windows console host, all in the same place!</p>
</li>
<li>
<p><a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a> - Oh My Zsh will not make you a 10x developer...but you may feel like one.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="# install
sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
# or
sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;
"><pre><span class="pl-c"><span class="pl-c">#</span> install</span>
sh -c <span class="pl-s"><span class="pl-pds">"</span><span class="pl-s"><span class="pl-pds">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="pl-pds">)</span></span><span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">#</span> or</span>
sh -c <span class="pl-s"><span class="pl-pds">"</span><span class="pl-s"><span class="pl-pds">$(</span>wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -<span class="pl-pds">)</span></span><span class="pl-pds">"</span></span></pre></div>
<ul>
<li><a href="https://github.com/zsh-users/antigen">antigen</a> - The plugin manager for zsh.</li>
<li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a> - Fish-like autosuggestions for zsh.</li>
<li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> - Fish shell like syntax highlighting for Zsh.</li>
<li><a href="https://github.com/zsh-users/zsh-history-substring-search">history-substring-search</a> - <g-emoji class="g-emoji" alias="tropical_fish" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f420.png">🐠</g-emoji> ZSH port of Fish history search (up arrow)</li>
</ul>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="# @see: https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md
# step1:
# 1.
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
# 2.
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
# 3.
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
# step2: ~/.zshrc
plugins=(
  [plugins...]
  zsh-autosuggestions
  zsh-syntax-highlighting
  history-substring-search
)
"><pre><span class="pl-c"><span class="pl-c">#</span> @see: https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</span>
<span class="pl-c"><span class="pl-c">#</span> step1:</span>
<span class="pl-c"><span class="pl-c">#</span> 1.</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="pl-smi">${ZSH_CUSTOM<span class="pl-k">:-</span>~<span class="pl-k">/</span>.oh-my-zsh<span class="pl-k">/</span>custom}</span>/plugins/zsh-autosuggestions
<span class="pl-c"><span class="pl-c">#</span> 2.</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="pl-smi">${ZSH_CUSTOM<span class="pl-k">:-</span>~<span class="pl-k">/</span>.oh-my-zsh<span class="pl-k">/</span>custom}</span>/plugins/zsh-syntax-highlighting
<span class="pl-c"><span class="pl-c">#</span> 3.</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="pl-smi">${ZSH_CUSTOM<span class="pl-k">:-</span>~<span class="pl-k">/</span>.oh-my-zsh<span class="pl-k">/</span>custom}</span>/plugins/zsh-history-substring-search
<span class="pl-c"><span class="pl-c">#</span> step2: ~/.zshrc</span>
plugins=(
  [plugins...]
  zsh-autosuggestions
  zsh-syntax-highlighting
  history-substring-search
)</pre></div>
<ul>
<li><a href="https://github.com/sobolevn/wakatime-zsh-plugin">wakatime</a> - <g-emoji class="g-emoji" alias="clock3" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png">🕒</g-emoji>Track how much time you have spent in your terminal!</li>
</ul>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="# preinstall
# step1:
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
# step2:
sudo python get-pip.py
############
# @see: https://wakatime.com/terminal
# step1:
sudo pip install wakatime
# step2:
cd ~/.oh-my-zsh/custom/plugins &amp;&amp; git clone https://github.com/sobolevn/wakatime-zsh-plugin.git wakatime
# step3:
# add `wakatime` to the list of `plugins` in your `~/.zshrc` file
# step4:
# Make sure your `API key` is in your `~/.wakatime.cfg` file.
"><pre><span class="pl-c"><span class="pl-c">#</span> preinstall</span>
<span class="pl-c"><span class="pl-c">#</span> step1:</span>
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
<span class="pl-c"><span class="pl-c">#</span> step2:</span>
sudo python get-pip.py
<span class="pl-c"><span class="pl-c">#</span>###########</span>
<span class="pl-c"><span class="pl-c">#</span> @see: https://wakatime.com/terminal</span>
<span class="pl-c"><span class="pl-c">#</span> step1:</span>
sudo pip install wakatime
<span class="pl-c"><span class="pl-c">#</span> step2:</span>
<span class="pl-c1">cd</span> <span class="pl-k">~</span>/.oh-my-zsh/custom/plugins <span class="pl-k">&amp;&amp;</span> git clone https://github.com/sobolevn/wakatime-zsh-plugin.git wakatime
<span class="pl-c"><span class="pl-c">#</span> step3:</span>
<span class="pl-c"><span class="pl-c">#</span> add `wakatime` to the list of `plugins` in your `~/.zshrc` file</span>
<span class="pl-c"><span class="pl-c">#</span> step4:</span>
<span class="pl-c"><span class="pl-c">#</span> Make sure your `API key` is in your `~/.wakatime.cfg` file.</span></pre></div>
</li>
<li>
<p><a href="https://github.com/rupa/z">z</a> - jump around.</p>
</li>
<li>
<p><a href="https://github.com/cli/cli">GitHub CLI</a> - GitHub’s official command line tool.</p>
</li>
<li>
<p><a href="https://asciinema.org" rel="nofollow">asciinema</a> - Record and share your terminal sessions, the right way.</p>
</li>
<li>
<p><a href="https://github.com/sharkdp/bat">bat</a> - A cat(1) clone with wings.</p>
</li>
<li>
<p><a href="https://github.com/dylanaraps/fff">fff</a> - <g-emoji class="g-emoji" alias="file_folder" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png">📁</g-emoji> A simple file manager written in bash.</p>
</li>
<li>
<p><a href="https://github.com/tmux/tmux">tmux</a> - is a terminal multiplexer.</p>
</li>
<li>
<p><a href="https://github.com/jonas/tig">tig</a> - Text-mode interface for git.</p>
</li>
<li>
<p><a href="https://github.com/starship/starship">starship</a> - <g-emoji class="g-emoji" alias="comet" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2604.png">☄</g-emoji><g-emoji class="g-emoji" alias="milky_way" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png">🌌️</g-emoji> The minimal, blazing-fast, and infinitely customizable prompt for any shell!</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="curl -fsSL https://starship.rs/install.sh | bash
vi ~/.zshrc
eval &quot;$(starship init zsh)&quot;
"><pre>curl -fsSL https://starship.rs/install.sh <span class="pl-k">|</span> bash
vi <span class="pl-k">~</span>/.zshrc
<span class="pl-c1">eval</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-s"><span class="pl-pds">$(</span>starship init zsh<span class="pl-pds">)</span></span><span class="pl-pds">"</span></span></pre></div>
</li>
<li>
<p><a href="https://github.com/kornelski/cavif">cavif</a> - PNG/JPEG to AVIF converter.</p>
</li>
<li>
<p><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> - ripgrep recursively searches directories for a regex pattern.</p>
</li>
<li>
<p><a href="https://github.com/sharkdp/fd">fd</a> - A simple, fast and user-friendly alternative to 'find'</p>
</li>
<li>
<p><a href="https://github.com/ogham/exa">exa</a> - A modern version of ‘ls’.</p>
</li>
<li>
<p><a href="https://github.com/Peltoche/lsd">lsd</a> - The next gen ls command.</p>
</li>
<li>
<p><a href="https://github.com/sharkdp/hexyl">hexyl</a> - A command-line hex viewer.</p>
</li>
<li>
<p><a href="https://github.com/BurntSushi/xsv">xsv</a> - A fast CSV command line toolkit written in Rust.</p>
</li>
<li>
<p><a href="https://github.com/wfxr/csview">csview</a> - <g-emoji class="g-emoji" alias="fax" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png">📠</g-emoji> A high performance csv viewer with cjk/emoji support.</p>
</li>
<li>
<p><a href="https://github.com/nivekuil/rip">rip(Rm ImProved)</a> - A safe and ergonomic alternative to rm.</p>
</li>
<li>
<p><a href="https://github.com/vmchale/tin-summer">The Tin Summer</a> - Find build artifacts that are taking up disk space.</p>
</li>
<li>
<p><a href="https://github.com/saschagrunert/git-journal">git-journal</a> - <g-emoji class="g-emoji" alias="book" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png">📖</g-emoji> The Git Commit Message and Changelog Generation Framework.</p>
</li>
<li>
<p><a href="https://gitlab.com/timvisee/ffsend" rel="nofollow">ffsend</a> - <g-emoji class="g-emoji" alias="mailbox_with_mail" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png">📬</g-emoji> Easily and securely share files from the command line. A fully featured Firefox Send client.</p>
</li>
<li>
<p><a href="https://github.com/XAMPPRocky/tokei">Tokei</a> - Count your code, quickly.</p>
</li>
<li>
<p><a href="https://github.com/sharkdp/hyperfine">hyperfine</a> - A command-line benchmarking tool.</p>
</li>
<li>
<p><a href="https://github.com/nerdypepper/eva">eva</a> - a calculator REPL, similar to bc(1)</p>
</li>
<li>
<p><a href="https://github.com/RazrFalcon/svgcleaner">svgcleaner</a> - svgcleaner could help you to clean up your SVG files from the unnecessary data.</p>
</li>
<li>
<p><a href="https://github.com/watchexec/watchexec">watchexec</a> - Executes commands in response to file modifications.</p>
</li>
<li>
<p><a href="https://github.com/dalance/procs">procs</a> - A modern replacement for ps written in Rust.</p>
</li>
<li>
<p><a href="https://github.com/cli/cli">GitHub CLI</a> - GitHub’s official command line tool.</p>
</li>
<li>
<p><a href="https://github.com/alacritty/alacritty">Alacritty</a> - A cross-platform, GPU-accelerated terminal emulator.</p>
</li>
<li>
<p><a href="https://github.com/willdoescode/nat">nat</a> - <g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji>the 'ls' replacement you never knew you needed<g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡️</g-emoji></p>
</li>
</ul>]]></description>
</item>

</channel>
</rss>